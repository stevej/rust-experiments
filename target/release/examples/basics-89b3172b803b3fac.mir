// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return pointer
    scope 1 {
        let _1: std::vec::Vec<i32>;      // "nums" in scope 1 at examples/basics.rs:2:9: 2:13
        scope 2 {
            let _5: i32;                 // "summed" in scope 2 at examples/basics.rs:3:9: 3:15
            scope 3 {
                let _20: &i32;           // "__arg0" in scope 3 at examples/basics.rs:1:1: 1:1
            }
        }
    }
    let mut _2: std::boxed::Box<[i32]>;
    let mut _3: std::boxed::Box<[i32; 4]>;
    let mut _4: std::boxed::Box<[i32; 4]>;
    let mut _6: std::slice::Iter<i32>;
    let mut _7: &[i32];
    let mut _8: &[i32];
    let mut _9: &std::vec::Vec<i32>;
    let mut _10: [closure@examples/basics.rs:3:38: 5:6];
    let mut _11: ();
    let mut _12: std::fmt::Arguments;
    let mut _13: &[&str];
    let mut _14: &[std::fmt::ArgumentV1];
    let mut _15: &[std::fmt::ArgumentV1; 1];
    let mut _16: &[std::fmt::ArgumentV1; 1];
    let mut _17: [std::fmt::ArgumentV1; 1];
    let mut _18: (&i32,);
    let mut _19: &i32;
    let mut _21: std::fmt::ArgumentV1;
    let mut _22: &i32;
    let mut _23: fn(&i32, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>;

    bb0: {
        StorageLive(_1);                 // scope 0 at examples/basics.rs:2:9: 2:13
        StorageLive(_2);                 // scope 0 at <vec macros>:3:25: 3:46
        StorageLive(_3);                 // scope 0 at <vec macros>:3:25: 3:46
        _4 = Box([i32; 4]);              // scope 0 at <vec macros>:3:25: 3:46
        (*_4) = [const 1i32, const 2i32, const 3i32, const 4i32]; // scope 0 at <vec macros>:3:29: 3:46
        _3 = _4;                         // scope 0 at <vec macros>:3:25: 3:46
        _2 = _3 as std::boxed::Box<[i32]> (Unsize); // scope 0 at <vec macros>:3:25: 3:46
        StorageDead(_3);                 // scope 0 at <vec macros>:3:46: 3:46
        _1 = const std::slice::<impl [T]>::into_vec(_2) -> [return: bb2, unwind: bb1]; // scope 0 at <vec macros>:3:1: 3:48
    }

    bb1: {
        resume;                          // scope 0 at examples/basics.rs:1:1: 7:2
    }

    bb2: {
        StorageDead(_2);                 // scope 0 at <vec macros>:3:48: 3:48
        StorageLive(_5);                 // scope 1 at examples/basics.rs:3:9: 3:15
        StorageLive(_6);                 // scope 1 at examples/basics.rs:3:18: 3:29
        StorageLive(_7);                 // scope 1 at examples/basics.rs:3:18: 3:22
        StorageLive(_8);                 // scope 1 at examples/basics.rs:3:18: 3:22
        StorageLive(_9);                 // scope 1 at examples/basics.rs:3:18: 3:22
        _9 = &_1;                        // scope 1 at examples/basics.rs:3:18: 3:22
        _8 = const std::ops::Deref::deref(_9) -> [return: bb4, unwind: bb3]; // scope 1 at examples/basics.rs:3:18: 3:22
    }

    bb3: {
        drop(_1) -> bb1;                 // scope 0 at examples/basics.rs:7:2: 7:2
    }

    bb4: {
        _7 = _8;                         // scope 1 at examples/basics.rs:3:18: 3:22
        StorageDead(_9);                 // scope 1 at examples/basics.rs:3:22: 3:22
        _6 = const std::slice::<impl [T]>::iter(_7) -> [return: bb5, unwind: bb3]; // scope 1 at examples/basics.rs:3:18: 3:29
    }

    bb5: {
        StorageDead(_7);                 // scope 1 at examples/basics.rs:3:29: 3:29
        StorageLive(_10);                // scope 1 at examples/basics.rs:3:38: 5:6
        _10 = [closure@examples/basics.rs:3:38: 5:6]; // scope 1 at examples/basics.rs:3:38: 5:6
        _5 = const std::iter::Iterator::fold(_6, const 0i32, _10) -> [return: bb6, unwind: bb3]; // scope 1 at examples/basics.rs:3:18: 5:7
    }

    bb6: {
        StorageDead(_10);                // scope 1 at examples/basics.rs:5:7: 5:7
        StorageDead(_6);                 // scope 1 at examples/basics.rs:5:7: 5:7
        StorageDead(_8);                 // scope 1 at examples/basics.rs:5:8: 5:8
        StorageLive(_12);                // scope 2 at <print macros>:2:27: 2:58
        StorageLive(_13);                // scope 2 at <println macros>:3:18: 3:43
        _13 = (main::__STATIC_FMTSTR: &[&str]); // scope 2 at <println macros>:3:18: 3:43
        StorageLive(_14);                // scope 2 at <println macros>:3:18: 3:43
        StorageLive(_15);                // scope 2 at <println macros>:3:18: 3:43
        StorageLive(_16);                // scope 2 at <println macros>:3:18: 3:43
        StorageLive(_17);                // scope 2 at <println macros>:3:18: 3:43
        StorageLive(_18);                // scope 2 at <println macros>:3:18: 3:43
        StorageLive(_19);                // scope 2 at examples/basics.rs:6:20: 6:26
        _19 = &_5;                       // scope 2 at examples/basics.rs:6:20: 6:26
        _18 = (_19,);                    // scope 2 at <println macros>:3:18: 3:43
        StorageDead(_19);                // scope 2 at <println macros>:3:43: 3:43
        StorageLive(_20);                // scope 2 at examples/basics.rs:1:1: 1:1
        _20 = (_18.0: &i32);             // scope 2 at examples/basics.rs:1:1: 1:1
        StorageLive(_21);                // scope 3 at <print macros>:2:27: 2:58
        StorageLive(_22);                // scope 3 at examples/basics.rs:6:20: 6:26
        _22 = _20;                       // scope 3 at examples/basics.rs:6:20: 6:26
        StorageLive(_23);                // scope 3 at examples/basics.rs:6:20: 6:26
        _23 = const std::fmt::Display::fmt as fn(&i32, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> (ReifyFnPointer); // scope 3 at examples/basics.rs:6:20: 6:26
        _21 = const std::fmt::ArgumentV1::new(_22, _23) -> [return: bb7, unwind: bb3]; // scope 3 at <print macros>:2:27: 2:58
    }

    bb7: {
        StorageDead(_23);                // scope 3 at <print macros>:2:58: 2:58
        StorageDead(_22);                // scope 3 at <print macros>:2:58: 2:58
        _17 = [_21];                     // scope 3 at <println macros>:3:18: 3:43
        StorageDead(_21);                // scope 3 at <println macros>:3:43: 3:43
        StorageDead(_20);                // scope 2 at <println macros>:3:43: 3:43
        _16 = &_17;                      // scope 2 at <println macros>:3:18: 3:43
        _15 = _16;                       // scope 2 at <println macros>:3:18: 3:43
        _14 = _15 as &[std::fmt::ArgumentV1] (Unsize); // scope 2 at <println macros>:3:18: 3:43
        StorageDead(_15);                // scope 2 at <println macros>:3:43: 3:43
        _12 = const std::fmt::Arguments::new_v1(_13, _14) -> [return: bb8, unwind: bb3]; // scope 2 at <print macros>:2:27: 2:58
    }

    bb8: {
        StorageDead(_14);                // scope 2 at <print macros>:2:58: 2:58
        StorageDead(_13);                // scope 2 at <print macros>:2:58: 2:58
        _11 = const std::io::_print(_12) -> [return: bb9, unwind: bb3]; // scope 2 at <print macros>:2:1: 2:60
    }

    bb9: {
        StorageDead(_12);                // scope 2 at <print macros>:2:60: 2:60
        StorageDead(_16);                // scope 2 at <print macros>:2:60: 2:60
        StorageDead(_17);                // scope 2 at <print macros>:2:60: 2:60
        StorageDead(_18);                // scope 2 at <print macros>:2:60: 2:60
        _0 = ();                         // scope 2 at examples/basics.rs:1:11: 7:2
        StorageDead(_5);                 // scope 1 at examples/basics.rs:7:2: 7:2
        drop(_1) -> [return: bb10, unwind: bb1]; // scope 0 at examples/basics.rs:7:2: 7:2
    }

    bb10: {
        StorageDead(_1);                 // scope 0 at examples/basics.rs:7:2: 7:2
        return;                          // scope 0 at examples/basics.rs:7:2: 7:2
    }
}

static main::__STATIC_FMTSTR: &[&str] = {
    let mut _0: &[&str];                 // return pointer
    let mut _1: &[&str; 2];
    let mut _2: &[&str; 2];
    let mut _3: [&str; 2];

    bb0: {
        StorageLive(_1);                 // scope 0 at <println macros>:3:18: 3:43
        _3 = [const "", const "\n"];     // scope 0 at <println macros>:3:18: 3:43
        _2 = &_3;                        // scope 0 at <println macros>:3:18: 3:43
        _1 = _2;                         // scope 0 at <println macros>:3:18: 3:43
        _0 = _1 as &[&str] (Unsize);     // scope 0 at <println macros>:3:18: 3:43
        StorageDead(_1);                 // scope 0 at <println macros>:3:43: 3:43
        return;                          // scope 0 at <println macros>:3:18: 3:43
    }
}

fn main::{{closure}}(_1: &mut [closure@examples/basics.rs:3:38: 5:6], _2: i32, _3: &i32) -> i32 {
    let mut _0: i32;                     // return pointer
    scope 1 {
        let _4: i32;                     // "n" in scope 1 at examples/basics.rs:3:39: 3:40
        let _5: &i32;                    // "m" in scope 1 at examples/basics.rs:3:42: 3:43
    }
    let mut _6: &i32;
    let mut _7: i32;

    bb0: {
        StorageLive(_4);                 // scope 0 at examples/basics.rs:3:39: 3:40
        _4 = _2;                         // scope 0 at examples/basics.rs:3:39: 3:40
        StorageLive(_5);                 // scope 0 at examples/basics.rs:3:42: 3:43
        _5 = _3;                         // scope 0 at examples/basics.rs:3:42: 3:43
        StorageLive(_6);                 // scope 1 at examples/basics.rs:4:9: 4:10
        _6 = _5;                         // scope 1 at examples/basics.rs:4:9: 4:10
        StorageLive(_7);                 // scope 1 at examples/basics.rs:4:13: 4:14
        _7 = _4;                         // scope 1 at examples/basics.rs:4:13: 4:14
        _0 = const std::ops::Add::add(_6, _7) -> bb1; // scope 1 at examples/basics.rs:4:9: 4:14
    }

    bb1: {
        StorageDead(_7);                 // scope 1 at examples/basics.rs:4:14: 4:14
        StorageDead(_6);                 // scope 1 at examples/basics.rs:4:14: 4:14
        StorageDead(_5);                 // scope 0 at examples/basics.rs:5:6: 5:6
        StorageDead(_4);                 // scope 0 at examples/basics.rs:5:6: 5:6
        return;                          // scope 1 at examples/basics.rs:5:6: 5:6
    }
}
